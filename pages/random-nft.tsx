import { useEthereum } from "@decentology/hyperverse-ethereum";
import { useRandomPick } from "@decentology/hyperverse-ethereum-randompick";
import Head from "next/head";
import { useEffect, useState } from "react";
import MemoryGame from "./components/MemoryGame";
import Nav from "./components/Nav";

const RandomNFT = () => {
  const { address } = useEthereum();
  const [walletAddress, setWalletAddress] = useState(address || "");
  const [nfts, setNFTs] = useState<any[]>([]);
  const [winner, setWinner] = useState<any>(null);
  const { StartRandomPick, GetRandomPick } = useRandomPick();
  const {
    mutate: randomMutate,
    data: requestId,
    isLoading: randomNumber,
  } = StartRandomPick();
  let { data: randomNumberPick, isLoading: loadingWinner } =
    GetRandomPick(requestId);

  const isLoading = randomNumber || loadingWinner;

  useEffect(() => {
    setWalletAddress(address || "");
  }, [address]);

  useEffect(() => {
    if (nfts.length > 0) {
      randomMutate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
    }
  }, [nfts]);

  useEffect(() => {
    if (randomNumberPick) {
      setWinner(nfts[randomNumberPick]);
    }
  }, [randomNumberPick]);

  const fetchNFTs = async () => {
    const response = await fetch(
      `https://api.opensea.io/api/v1/assets?owner=${walletAddress}&limit=10`
    );
    if (!response.ok) return;
    const { assets } = await response.json();
    setNFTs(assets);
  };

  return (
    <div>
      <Head>
        <title>Hyperverse</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav />
      <main className="flex flex-col items-center min-h-screen p-4">
        <h1 className="text-3xl mb-6">
          Enter an ETH address to view a random NFT from that wallet
        </h1>
        <div className="mb-4">
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="address"
            type="text"
            placeholder="Address"
            onChange={(e) => setWalletAddress(e.target.value)}
            value={walletAddress}
          />
        </div>
        {!isLoading ? (
          <button
            type="button"
            className="text-lg px-4 py-2 rounded text-teal-500 bg-black mb-4"
            onClick={() => fetchNFTs()}
            disabled={!address}
          >
            Submit
          </button>
        ) : (
          <button
            type="button"
            className="text-lg px-4 py-2 rounded text-white bg-black mb-4"
          >
            <svg className="animate-spin rounded-full h-5 w-5 mr-3 border-b-2 border-white-900 inline" />
            Processing...
          </button>
        )}
        {winner ? (
          <div className="max-w-sm rounded overflow-hidden shadow-lg">
            <img
              className="w-full"
              src={winner.image_preview_url}
              alt="Sunset in the mountains"
            />
            <div className="px-6 py-4">
              <div className="font-bold text-xl mb-2">{winner.name}</div>
              <p className="text-gray-700 text-base">{winner.description}</p>
            </div>
            {/* <div className="px-6 pt-4 pb-2">
            <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">#photography</span>
            <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">#travel</span>
            <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">#winter</span>
          </div> */}
          </div>
        ) : null}

        <h1 className="text-xl mt-20">
          While you wait for the amazing NFT, play this game ðŸ‘‡
        </h1>
        <div className="flex items-center justify-center h-[60vh]">
          <MemoryGame />
        </div>
      </main>
    </div>
  );
};

export default RandomNFT;
